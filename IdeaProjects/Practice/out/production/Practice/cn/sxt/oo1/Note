多态：是在main()中定义一个static方法，形参为共同基类类型
这样就可以将所有子类类型的对象作为实参传递给形参，从而是父类类型指向子类类型
多态存在的三个必要条件：继承，方法重写，父类引用指向子类对象

对象的转型（casting）：父类引用指向子类对象，这个过程叫做向上转型，属于自动另外类型转换 （即自动向上转型）
 Animal animal = new Dog();  //自动向上转型
 Dog d = (Dog)animal;        //强制向下转型

 Animal animal = new Dog();  //自动向上转型
 Cat c = (Cat)animal;        //强制向下转型
 c.CatTest();
 // 编译时能够通过，但是运行时不能通过
 //因为系统把animal当作Animal类型处理, 向下强制类型转换后，又将animal当作Cat类型
 // 系统将animal当作Cat类型处理，编译时能通过，但是运行时会发生错误


final关键字的作用：
  1.修饰变量:被它修饰的变量不可改变，一旦赋了初值就不能被重新赋值；
    只有在定义时可以对其赋值，即只能通过初始化来对final修饰的变量进行唯一的一次赋值；
  2.修饰方法：该方法不可被子类重写（override），但是可以被重载(overload)
  3.修饰类：修饰的类不能被继承，比如Math，String等


转型在普通父类类型和子类， 抽象类类型和子类， 接口类型和实现类上均能实现，          ==》转型实际上时欺骗编译器
多态存在的三个必要条件：继承，方法重写（重点），父类引用指向子类对象              ==》多态才是真正的用父类引用指向子类对象
两者区别：转型可以没有方法重写，多态必须有方法重写，且多态是以方法传参的形式来实现